newthing = [...dic]
newthing = [...dix]
dic = []
as
var a = ...asdf
...asdf
dic.asdf = 1
dic.asdf = a
dic.map(console.log)
Object.keys(dic)
dic.1
dic
dic[1] = 'hello'
dic[x] = 'hello'
const dic = {}
console.log(dic)
;
dic[{x:1, y,2}] = 'hello'
dic = {}
Symbol('asd') === Symbol('asd')
Symbol('asd').toString() === Symbol('asd').toString()
Symbol('asd').toString()
!1 && !1
1 && 1
false === undefined
c['a']
c['b']
c.b
c = {a:1}
{a:1}['b']
undefined === undefined
z.replace(/([a-z])([A-Z])/g, (match, a, b) => a + '-' + b.toLowerCase())
z.match(/([a-z])([A-Z])/g)
z = 'bob-catGoldthwait'
z.match(/(a-z)(A-Z)/g)
z.match(/(a-z)(A-Z)/g/)
z.replace(/(a-z)(A-Z)/g, (match, p1, p2) => p1+'-'+p2.toLowerCase())
z.replace(/(a-z)(A-Z)/g, (match, otherStuff) => console.log)
z = 'bob-catGoldthwait'
d
a
{c, d} = a
a = {a:1,b:2}
a(1)
a(q)
a(a)
a = (b)=> b
a
a()
var a = () => {var {a: b, ...rest} = {c: 'd'}; return rest;}
()=>{var{a: b, ...rest} = {c: 'd'}; return rest}
()=>{var{a: b, ...rest} = {c: 'd'};}
1
return 1
return
var {a: b, ...rest} = {c: 'd'};
;
var {a: b, ...rest} = {c: 'd'}
rest
var {a: b, ...rest} = {c: 'd'}
console.log(rest);
rest
;
const {a: b, ...rest} = {c: 'd'}
mom('2000', 'YYYY').add(1, 'year')
mom(2000, 'YYYY').add(1, 'year')
moment(2000, 'YYYY').add(1, 'year')
moment(1000, 'YYYY').add(1, 'year')
mom(2017, 'YYYY').add(1,'year').subtract(1, 'millisecond')
mom(2017, 'YYYY').add(1,'year').subtract(1, 'millisecond)
mom(2017, 'YYYY').add(1,'year')
mom(2017, 'YYYY')
var mom = require('moment')
true && a.a
undefined && a.a
undefine && a.a
faker.resolve(schema).then(console.log)
const faker = require('json-schema-faker')
const schema = require('./lib/common/models/axiom-tank-mix')
faker.resolve(schema).then(console.log)
const faker = require('json-schema-faker')
const schema = require('./lib/common/models/axiom-tank-mix')
faker.resolve(schema).then(console.log)
schema
const schema = require('./lib/common/models/axiom-tank-mix')
const faker = require('json-schema-faker')
a.assocPath('a',1)({});
a.assocpath('a',1)({});
var a = require('ramda')
r.equals({a: 1},{a: 1})
r.equals({a: 1, 'undefined':undefined},{a: 1})
r = require('ramda')
undefined !== Symbol('asdf')
undefined !== Symbole('asdf')
new Date().getTime()
new Date('9/15/2017').getTime()
new Date().getTime()
new Date('1/1/2017').getTime()
productsToFail
productsToSucceed
const [productsToSucceed, productsToFail] = splitAt(1, chance.shuffle(myArray))
chance.shuffle(myArray)
const myArray = [1,2,3,4,5,6]
const chance= new require('chance')()
splitAt(0)([1,2,3,4])
splitAt(1)([1,2,3,4])
[1,2,3,4]
const {splitAt} = require('ramda')
console.log(1);
;
from 'chance'
import Chance
NODE_ENV
bob.length
bob()
bob.prototype.arguments
bob.arguments
bob
function bob (a, b, c, d, e) { console.log(a,b,c,d,e);}
bob
const bob = () => 'cat';
(() => {console.log(this);}).call('richard')
(() => {console.log(this);})()
(() => {console.log(this);})
bob.bind('sally')()
bob.bind('sally')
bob.call('tom')
bob()
function bob() { console.log(this); }
products.map(x => x.productType)
products.map(productType)
products
const products = require('./lib/data/products')
ls
const products = require('./lib/data/produts')
Object.assign({}, obj, {d: 'bob'}, {d: 'tom'})
obj
Object.assign({}, obj, {d: 'bob'})
obj
Object.assign(obj, {c: '12'})
obj
}
a: '3'
const obj = {
'hello'